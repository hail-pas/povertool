"""
Django settings for povertool project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import datetime
import logging
import os
import sys
from datetime import timedelta
from pathlib import Path

import sentry_sdk
from celery.schedules import crontab
from dotenv import find_dotenv, load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv(find_dotenv(), override=True)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_LOG_DIR = os.path.join(BASE_DIR, "logs")
sys.path.insert(0, str(BASE_DIR))
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

SERVER_URL = os.getenv("SERVER_URL")
PROJ_NAME = os.getenv("PROJ_NAME")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "r^os@$221g2&0&q-=n0_ihwc$z_u^+@c$t)e+k-#_-&w-gni#a"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "True"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 配置sentry错误监控
# sentry_sdk.init(
#     dsn=os.getenv('SENTRY_DSN'),
#     integrations=[DjangoIntegration()],
#     environment=os.getenv('ENVIRONMENT', 'development')
# )

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 跨域配置
ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # DRF
    "corsheaders",
    "rest_framework",
    "captcha",
    "users.apps.UsersConfig",
    "tools.apps.ToolsConfig",
    "drf_yasg",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 跨域中间件
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    # 'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "povertool.urls"
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    #     # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    # ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}
"""
REST-Framework-JWT
"""
JWT_AUTH = {
    "JWT_EXPIRATION_DELTA": datetime.timedelta(days=7),  # 过期时间
    "JWT_AUTH_HEADER_PREFIX": "JWT",  # 客户端回传TOKEN时，需要增加的前缀
}

AUTH_USER_MODEL = "users.UserProfile"
# 当需要验证一个用户的身份时，调用类的列表
AUTHENTICATION_BACKENDS = ("users.authentification.CustomAuthBackend",)


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR, "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "povertool.wsgi.application"
ASGI_APPLICATION = "fabulous.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DATABASES = {
    # "default": {"ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / "db.sqlite3",}
    # MySQL
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT", 3306),
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": 'SET sql_mode="STRICT_TRANS_TABLES", innodb_strict_mode=1',
        },
    },
    # 'slave': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': os.getenv('SLAVE_DB_NAME'),
    #     'USER': os.getenv('SLAVE_DB_USER'),
    #     'PASSWORD': os.getenv('SLAVE_DB_PASSWORD'),
    #     'HOST': os.getenv('SLAVE_DB_HOST'),
    #     'PORT': os.getenv('SLAVE_DB_PORT', 3306),
    #     'OPTIONS': {
    #         'charset': 'utf8mb4',
    #         'init_command': 'SET sql_mode="STRICT_TRANS_TABLES", innodb_strict_mode=1',
    #     },
    # },
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Caches  pip install django-redis = "*"
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f'redis://{os.getenv("REDIS_HOST")}:6379/0',
        "TIMEOUT": 24 * 3600,
        "KEY_PREFIX": "povertool",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.getenv("REDIS_PASSWORD"),
        },
    },
    # # 持久化缓存
    # 'pers': {
    #     'BACKEND': 'django_redis.cache.RedisCache',
    #     'LOCATION': f'redis://{os.getenv("REDIS_HOST")}:6379/1',
    #     'TIMEOUT': 24 * 3600,
    #     'KEY_PREFIX': 'povertool_pers',
    #     'OPTIONS': {
    #         'CLIENT_CLASS': 'django_redis.client.DefaultClient',
    #         'PASSWORD': os.getenv('REDIS_PASSWORD')
    #     }
    # },
}
CACHE_MIDDLEWARE_KEY_PREFIX = "povertool"
CACHE_MIDDLEWARE_SECONDS = 24 * 3600


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "collect_static")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Celery
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = TIME_ZONE
CELERYD_TASK_TIME_LIMIT = 60
CELERYD_MAX_TASKS_PER_CHILD = 200
CELERYD_CONCURRENCY = 1
# CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_BACKEND = f"redis://{os.getenv('BROKER_HOST')}:6379/4"
CELERY_RESULT_SERIALIZER = "json"
CELERY_BROKER_URL = f"redis://{os.getenv('BROKER_HOST')}:6379/3"  # 'redis://127.0.0.1:6379/3'

CELERY_ROUTES = {
    "定时任务": {"queue": "timing_work"},  # task name  # queue
}
CELERY_DEFAULT_QUEUE = "celery_work"  # 默认对列
# if not DEBUG:
CELERYBEAT_SCHEDULE = {
    "定时任务": {
        "task": "定时任务",
        "schedule": timedelta(seconds=5),  # crontab(minute='*/2')  # timedelta(seconds=5)
    },
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# LOG
LOGGER = logging.getLogger(PROJ_NAME)
if DEBUG:
    LOGGER.setLevel(logging.DEBUG)
else:
    LOGGER.setLevel(logging.INFO)
sh = logging.StreamHandler(sys.stdout)
sh.setLevel(logging.DEBUG)
sh.setFormatter(
    logging.Formatter(
        fmt="%(asctime)s - %(name)s:%(lineno)d - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
)
LOGGER.addHandler(sh)
